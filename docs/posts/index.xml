<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Felix Weilbach</title>
    <link>https://flexw.github.io/posts/</link>
    <description>Recent content in Posts on Felix Weilbach</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 10 Mar 2025 10:00:00 +0200</lastBuildDate>
    <atom:link href="https://flexw.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rendering Thousands of Point Lights Efficiently</title>
      <link>https://flexw.github.io/posts/rendering-thousands-of-point-lights-efficiently/</link>
      <pubDate>Mon, 10 Mar 2025 10:00:00 +0200</pubDate>
      <guid>https://flexw.github.io/posts/rendering-thousands-of-point-lights-efficiently/</guid>
      <description>&lt;h2 id=&#34;tldr&#34;&gt;TL;DR;&lt;/h2&gt;&#xA;&lt;p&gt;In this post, I&amp;rsquo;ll explain a rendering technique called Clustered Rendering, which I used in &lt;a href=&#34;https://flexw.github.io/posts/learnings-from-creating-a-game-engine/&#34;&gt;my game engine&lt;/a&gt; to efficiently render (possibly) thousands of point lights. Clustered Rendering is compatible with both Forward and Deferred rendering architectures. When combined with Forward rendering, it&amp;rsquo;s often referred to as Forward+.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/shooting.png&#34; alt=&#34;Game&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;table-of-contents&#34;&gt;Table Of Contents&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#preface&#34;&gt;Preface&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#how-clustered-rendering-works&#34;&gt;How Clustered Rendering Works&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#implementation&#34;&gt;Implementation&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#bin-mapping&#34;&gt;Bin Mapping&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#tile-mapping&#34;&gt;Tile Mapping&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#lighting-computation-in-the-shader&#34;&gt;Lighting Computation in the Shader&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#code&#34;&gt;Code&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#resources&#34;&gt;Resources&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;preface&#34;&gt;Preface&lt;/h2&gt;&#xA;&lt;p&gt;When doing real-time rendering for games, especially 3D games, we usually want to light the scene dynamically. Games commonly use three types of lights: Directional Lights, Point Lights, and Spot Lights.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learnings From Creating a Game Engine</title>
      <link>https://flexw.github.io/posts/learnings-from-creating-a-game-engine/</link>
      <pubDate>Sun, 28 Jul 2024 10:00:00 +0200</pubDate>
      <guid>https://flexw.github.io/posts/learnings-from-creating-a-game-engine/</guid>
      <description>&lt;h2 id=&#34;tldr&#34;&gt;TL;DR;&lt;/h2&gt;&#xA;&lt;p&gt;I developed a 3D game engine in C++ using OpenGL from scratch, relying minimally on third-party libraries, and released a small game prototype built with it. The prototype, a simple 3D asteroids game, is available for download on &lt;a href=&#34;https://flexww.itch.io/space-shooter&#34;&gt;itch.io&lt;/a&gt;. I want to share my journey, insights, and the engine&amp;rsquo;s architecture.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/game.png&#34; alt=&#34;Game&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;table-of-contents&#34;&gt;Table Of Contents&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#motivation&#34;&gt;Motivation&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#general&#34;&gt;General&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#know-what-you-want-to-build&#34;&gt;Know What You Want To Build&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#do-not-think-too-much-about-architecture&#34;&gt;Do Not Think (Too Much) About Architecture&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#engine-core&#34;&gt;Engine Core&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#build-system&#34;&gt;Build System&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#memory-management&#34;&gt;Memory Management&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#virtual-file-system&#34;&gt;Virtual File System&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#config-system&#34;&gt;Config System&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#graphics&#34;&gt;Graphics&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#frame-breakdown&#34;&gt;Frame Breakdown&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#gbuffer&#34;&gt;GBuffer&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#lighting&#34;&gt;Lighting&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#transparent&#34;&gt;Transparent&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#bloom&#34;&gt;Bloom&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#tone-mapping&#34;&gt;Tone Mapping&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#ui-debug&#34;&gt;UI, Debug&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#renderer-interface&#34;&gt;Renderer Interface&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#material-system&#34;&gt;Material System&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#game-ui&#34;&gt;Game UI&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#asset-management&#34;&gt;Asset Management&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#audio&#34;&gt;Audio&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#physics&#34;&gt;Physics&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#gameplay&#34;&gt;Gameplay&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#deployment&#34;&gt;Deployment&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#final-words&#34;&gt;Final Words&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#resources&#34;&gt;Resources&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;motivation&#34;&gt;Motivation&lt;/h2&gt;&#xA;&lt;p&gt;Building things and understanding how they work under the hood has always captivated me. From the moment I began programming, the ability to create my own worlds through a computer fascinated me. Writing my own game with my own game engine has been a longstanding passion. The project I&amp;rsquo;m describing here began in November 2023 as a hobby alongside my full-time job as a Software Engineer. However, this wasn&amp;rsquo;t a project I started from scratch. I had spent years coding games and game engines as a hobby, and I&amp;rsquo;ve included some screenshots of earlier projects at the end of this article.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
